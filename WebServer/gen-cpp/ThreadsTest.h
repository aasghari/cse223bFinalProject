/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ThreadsTest_H
#define ThreadsTest_H

#include <thrift/TDispatchProcessor.h>
#include "ThreadsTest_types.h"



class ThreadsTestIf {
 public:
  virtual ~ThreadsTestIf() {}
  virtual int32_t threadOne(const int32_t sleep) = 0;
  virtual int32_t threadTwo(const int32_t sleep) = 0;
  virtual int32_t threadThree(const int32_t sleep) = 0;
  virtual int32_t threadFour(const int32_t sleep) = 0;
  virtual int32_t stop() = 0;
};

class ThreadsTestIfFactory {
 public:
  typedef ThreadsTestIf Handler;

  virtual ~ThreadsTestIfFactory() {}

  virtual ThreadsTestIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ThreadsTestIf* /* handler */) = 0;
};

class ThreadsTestIfSingletonFactory : virtual public ThreadsTestIfFactory {
 public:
  ThreadsTestIfSingletonFactory(const boost::shared_ptr<ThreadsTestIf>& iface) : iface_(iface) {}
  virtual ~ThreadsTestIfSingletonFactory() {}

  virtual ThreadsTestIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ThreadsTestIf* /* handler */) {}

 protected:
  boost::shared_ptr<ThreadsTestIf> iface_;
};

class ThreadsTestNull : virtual public ThreadsTestIf {
 public:
  virtual ~ThreadsTestNull() {}
  int32_t threadOne(const int32_t /* sleep */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t threadTwo(const int32_t /* sleep */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t threadThree(const int32_t /* sleep */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t threadFour(const int32_t /* sleep */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t stop() {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _ThreadsTest_threadOne_args__isset {
  _ThreadsTest_threadOne_args__isset() : sleep(true) {}
  bool sleep;
} _ThreadsTest_threadOne_args__isset;

class ThreadsTest_threadOne_args {
 public:

  ThreadsTest_threadOne_args() : sleep(15) {
  }

  virtual ~ThreadsTest_threadOne_args() throw() {}

  int32_t sleep;

  _ThreadsTest_threadOne_args__isset __isset;

  void __set_sleep(const int32_t val) {
    sleep = val;
  }

  bool operator == (const ThreadsTest_threadOne_args & rhs) const
  {
    if (!(sleep == rhs.sleep))
      return false;
    return true;
  }
  bool operator != (const ThreadsTest_threadOne_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThreadsTest_threadOne_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThreadsTest_threadOne_pargs {
 public:


  virtual ~ThreadsTest_threadOne_pargs() throw() {}

  const int32_t* sleep;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThreadsTest_threadOne_result__isset {
  _ThreadsTest_threadOne_result__isset() : success(false) {}
  bool success;
} _ThreadsTest_threadOne_result__isset;

class ThreadsTest_threadOne_result {
 public:

  ThreadsTest_threadOne_result() : success(0) {
  }

  virtual ~ThreadsTest_threadOne_result() throw() {}

  int32_t success;

  _ThreadsTest_threadOne_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const ThreadsTest_threadOne_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ThreadsTest_threadOne_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThreadsTest_threadOne_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThreadsTest_threadOne_presult__isset {
  _ThreadsTest_threadOne_presult__isset() : success(false) {}
  bool success;
} _ThreadsTest_threadOne_presult__isset;

class ThreadsTest_threadOne_presult {
 public:


  virtual ~ThreadsTest_threadOne_presult() throw() {}

  int32_t* success;

  _ThreadsTest_threadOne_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThreadsTest_threadTwo_args__isset {
  _ThreadsTest_threadTwo_args__isset() : sleep(true) {}
  bool sleep;
} _ThreadsTest_threadTwo_args__isset;

class ThreadsTest_threadTwo_args {
 public:

  ThreadsTest_threadTwo_args() : sleep(15) {
  }

  virtual ~ThreadsTest_threadTwo_args() throw() {}

  int32_t sleep;

  _ThreadsTest_threadTwo_args__isset __isset;

  void __set_sleep(const int32_t val) {
    sleep = val;
  }

  bool operator == (const ThreadsTest_threadTwo_args & rhs) const
  {
    if (!(sleep == rhs.sleep))
      return false;
    return true;
  }
  bool operator != (const ThreadsTest_threadTwo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThreadsTest_threadTwo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThreadsTest_threadTwo_pargs {
 public:


  virtual ~ThreadsTest_threadTwo_pargs() throw() {}

  const int32_t* sleep;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThreadsTest_threadTwo_result__isset {
  _ThreadsTest_threadTwo_result__isset() : success(false) {}
  bool success;
} _ThreadsTest_threadTwo_result__isset;

class ThreadsTest_threadTwo_result {
 public:

  ThreadsTest_threadTwo_result() : success(0) {
  }

  virtual ~ThreadsTest_threadTwo_result() throw() {}

  int32_t success;

  _ThreadsTest_threadTwo_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const ThreadsTest_threadTwo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ThreadsTest_threadTwo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThreadsTest_threadTwo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThreadsTest_threadTwo_presult__isset {
  _ThreadsTest_threadTwo_presult__isset() : success(false) {}
  bool success;
} _ThreadsTest_threadTwo_presult__isset;

class ThreadsTest_threadTwo_presult {
 public:


  virtual ~ThreadsTest_threadTwo_presult() throw() {}

  int32_t* success;

  _ThreadsTest_threadTwo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThreadsTest_threadThree_args__isset {
  _ThreadsTest_threadThree_args__isset() : sleep(true) {}
  bool sleep;
} _ThreadsTest_threadThree_args__isset;

class ThreadsTest_threadThree_args {
 public:

  ThreadsTest_threadThree_args() : sleep(15) {
  }

  virtual ~ThreadsTest_threadThree_args() throw() {}

  int32_t sleep;

  _ThreadsTest_threadThree_args__isset __isset;

  void __set_sleep(const int32_t val) {
    sleep = val;
  }

  bool operator == (const ThreadsTest_threadThree_args & rhs) const
  {
    if (!(sleep == rhs.sleep))
      return false;
    return true;
  }
  bool operator != (const ThreadsTest_threadThree_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThreadsTest_threadThree_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThreadsTest_threadThree_pargs {
 public:


  virtual ~ThreadsTest_threadThree_pargs() throw() {}

  const int32_t* sleep;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThreadsTest_threadThree_result__isset {
  _ThreadsTest_threadThree_result__isset() : success(false) {}
  bool success;
} _ThreadsTest_threadThree_result__isset;

class ThreadsTest_threadThree_result {
 public:

  ThreadsTest_threadThree_result() : success(0) {
  }

  virtual ~ThreadsTest_threadThree_result() throw() {}

  int32_t success;

  _ThreadsTest_threadThree_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const ThreadsTest_threadThree_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ThreadsTest_threadThree_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThreadsTest_threadThree_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThreadsTest_threadThree_presult__isset {
  _ThreadsTest_threadThree_presult__isset() : success(false) {}
  bool success;
} _ThreadsTest_threadThree_presult__isset;

class ThreadsTest_threadThree_presult {
 public:


  virtual ~ThreadsTest_threadThree_presult() throw() {}

  int32_t* success;

  _ThreadsTest_threadThree_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThreadsTest_threadFour_args__isset {
  _ThreadsTest_threadFour_args__isset() : sleep(true) {}
  bool sleep;
} _ThreadsTest_threadFour_args__isset;

class ThreadsTest_threadFour_args {
 public:

  ThreadsTest_threadFour_args() : sleep(15) {
  }

  virtual ~ThreadsTest_threadFour_args() throw() {}

  int32_t sleep;

  _ThreadsTest_threadFour_args__isset __isset;

  void __set_sleep(const int32_t val) {
    sleep = val;
  }

  bool operator == (const ThreadsTest_threadFour_args & rhs) const
  {
    if (!(sleep == rhs.sleep))
      return false;
    return true;
  }
  bool operator != (const ThreadsTest_threadFour_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThreadsTest_threadFour_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThreadsTest_threadFour_pargs {
 public:


  virtual ~ThreadsTest_threadFour_pargs() throw() {}

  const int32_t* sleep;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThreadsTest_threadFour_result__isset {
  _ThreadsTest_threadFour_result__isset() : success(false) {}
  bool success;
} _ThreadsTest_threadFour_result__isset;

class ThreadsTest_threadFour_result {
 public:

  ThreadsTest_threadFour_result() : success(0) {
  }

  virtual ~ThreadsTest_threadFour_result() throw() {}

  int32_t success;

  _ThreadsTest_threadFour_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const ThreadsTest_threadFour_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ThreadsTest_threadFour_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThreadsTest_threadFour_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThreadsTest_threadFour_presult__isset {
  _ThreadsTest_threadFour_presult__isset() : success(false) {}
  bool success;
} _ThreadsTest_threadFour_presult__isset;

class ThreadsTest_threadFour_presult {
 public:


  virtual ~ThreadsTest_threadFour_presult() throw() {}

  int32_t* success;

  _ThreadsTest_threadFour_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ThreadsTest_stop_args {
 public:

  ThreadsTest_stop_args() {
  }

  virtual ~ThreadsTest_stop_args() throw() {}


  bool operator == (const ThreadsTest_stop_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ThreadsTest_stop_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThreadsTest_stop_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThreadsTest_stop_pargs {
 public:


  virtual ~ThreadsTest_stop_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThreadsTest_stop_result__isset {
  _ThreadsTest_stop_result__isset() : success(false) {}
  bool success;
} _ThreadsTest_stop_result__isset;

class ThreadsTest_stop_result {
 public:

  ThreadsTest_stop_result() : success(0) {
  }

  virtual ~ThreadsTest_stop_result() throw() {}

  int32_t success;

  _ThreadsTest_stop_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const ThreadsTest_stop_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ThreadsTest_stop_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThreadsTest_stop_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThreadsTest_stop_presult__isset {
  _ThreadsTest_stop_presult__isset() : success(false) {}
  bool success;
} _ThreadsTest_stop_presult__isset;

class ThreadsTest_stop_presult {
 public:


  virtual ~ThreadsTest_stop_presult() throw() {}

  int32_t* success;

  _ThreadsTest_stop_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ThreadsTestClient : virtual public ThreadsTestIf {
 public:
  ThreadsTestClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  ThreadsTestClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t threadOne(const int32_t sleep);
  void send_threadOne(const int32_t sleep);
  int32_t recv_threadOne();
  int32_t threadTwo(const int32_t sleep);
  void send_threadTwo(const int32_t sleep);
  int32_t recv_threadTwo();
  int32_t threadThree(const int32_t sleep);
  void send_threadThree(const int32_t sleep);
  int32_t recv_threadThree();
  int32_t threadFour(const int32_t sleep);
  void send_threadFour(const int32_t sleep);
  int32_t recv_threadFour();
  int32_t stop();
  void send_stop();
  int32_t recv_stop();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ThreadsTestProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ThreadsTestIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ThreadsTestProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_threadOne(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_threadTwo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_threadThree(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_threadFour(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_stop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ThreadsTestProcessor(boost::shared_ptr<ThreadsTestIf> iface) :
    iface_(iface) {
    processMap_["threadOne"] = &ThreadsTestProcessor::process_threadOne;
    processMap_["threadTwo"] = &ThreadsTestProcessor::process_threadTwo;
    processMap_["threadThree"] = &ThreadsTestProcessor::process_threadThree;
    processMap_["threadFour"] = &ThreadsTestProcessor::process_threadFour;
    processMap_["stop"] = &ThreadsTestProcessor::process_stop;
  }

  virtual ~ThreadsTestProcessor() {}
};

class ThreadsTestProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ThreadsTestProcessorFactory(const ::boost::shared_ptr< ThreadsTestIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ThreadsTestIfFactory > handlerFactory_;
};

class ThreadsTestMultiface : virtual public ThreadsTestIf {
 public:
  ThreadsTestMultiface(std::vector<boost::shared_ptr<ThreadsTestIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ThreadsTestMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ThreadsTestIf> > ifaces_;
  ThreadsTestMultiface() {}
  void add(boost::shared_ptr<ThreadsTestIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t threadOne(const int32_t sleep) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->threadOne(sleep);
    }
    return ifaces_[i]->threadOne(sleep);
  }

  int32_t threadTwo(const int32_t sleep) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->threadTwo(sleep);
    }
    return ifaces_[i]->threadTwo(sleep);
  }

  int32_t threadThree(const int32_t sleep) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->threadThree(sleep);
    }
    return ifaces_[i]->threadThree(sleep);
  }

  int32_t threadFour(const int32_t sleep) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->threadFour(sleep);
    }
    return ifaces_[i]->threadFour(sleep);
  }

  int32_t stop() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->stop();
    }
    return ifaces_[i]->stop();
  }

};



#endif
